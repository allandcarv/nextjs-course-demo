{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/allan.carvalho/workspace/courses/react/complete-guide/section-23_next-js/nextjs-project/pages/[meetupId]/index.js\";\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { find, findOne } from '../../shared/util/db';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = new MongoClient('mongodb+srv://react-course:react-course-pass@cluster0.7s65w.mongodb.net/meetups?retryWrites=true&w=majority');\n  await client.connect();\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await find('meetups', ({}, {\n    _id: 1\n  })).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(m => ({\n      params: {\n        meetupId: m._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const {\n    params\n  } = context; // fetch data from single meetup\n\n  const selectedMeetup = await findOne('meetups', {\n    _id: params.meetupId\n  });\n  return {\n    props: {\n      meetupData: {\n        image: selectedMeetup.image,\n        title: selectedMeetup.title,\n        description: selectedMeetup.description,\n        address: selectedMeetup.address\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/allan.carvalho/workspace/courses/react/complete-guide/section-23_next-js/nextjs-project/pages/[meetupId]/index.js"],"names":["Fragment","Head","MongoClient","ObjectId","MeetupDetail","find","findOne","MeetupDetails","props","meetupData","title","description","image","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","_id","toArray","close","fallback","paths","map","m","params","meetupId","toString","getStaticProps","context","selectedMeetup"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;AAEA,SAASC,IAAT,EAAeC,OAAf,QAA8B,sBAA9B;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,IAAD;AAAA,8BACI;AAAA,kBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBE;AAAnD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI,QAAC,YAAD;AACI,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAD5B;AAEI,MAAA,KAAK,EAAEJ,KAAK,CAACC,UAAN,CAAiBC,KAF5B;AAGI,MAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBI,OAH9B;AAII,MAAA,WAAW,EAAEL,KAAK,CAACC,UAAN,CAAiBE;AAJlC;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;AAED,OAAO,eAAeG,cAAf,GAAgC;AAEnC,QAAMC,MAAM,GAAG,IAAIb,WAAJ,CAAgB,6GAAhB,CAAf;AAEA,QAAMa,MAAM,CAACC,OAAP,EAAN;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMf,IAAI,CAAC,SAAD,GAAa,IAAI;AAAEgB,IAAAA,GAAG,EAAE;AAAP,GAAjB,EAAJ,CAAkCC,OAAlC,EAAtB;AAEAP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAYC,CAAC,KAAK;AACrBC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAEF,CAAC,CAACN,GAAF,CAAMS,QAAN;AADN;AADa,KAAL,CAAb;AAFJ,GAAP;AAQH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAM;AAAEJ,IAAAA;AAAF,MAAaI,OAAnB,CAD0C,CAG1C;;AAEA,QAAMC,cAAc,GAAG,MAAM3B,OAAO,CAAC,SAAD,EAAY;AAAEe,IAAAA,GAAG,EAAEO,MAAM,CAACC;AAAd,GAAZ,CAApC;AAEA,SAAO;AACHrB,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAE;AACRG,QAAAA,KAAK,EAAEqB,cAAc,CAACrB,KADd;AAERF,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAFd;AAGRC,QAAAA,WAAW,EAAEsB,cAAc,CAACtB,WAHpB;AAIRE,QAAAA,OAAO,EAAEoB,cAAc,CAACpB;AAJhB;AADT;AADJ,GAAP;AAUH;AAED,eAAeN,aAAf","sourcesContent":["import { Fragment } from 'react';\nimport Head from 'next/head'\nimport { MongoClient, ObjectId } from 'mongodb';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nimport { find, findOne } from '../../shared/util/db';\n\nfunction MeetupDetails(props) {\n    return (\n        <Fragment>\n            <Head>\n                <title>{props.meetupData.title}</title>\n                <meta name=\"description\" content={props.meetupData.description} />\n            </Head>\n            <MeetupDetail\n                image={props.meetupData.image}\n                title={props.meetupData.title}\n                address={props.meetupData.address}\n                description={props.meetupData.description}\n            />\n        </Fragment>\n\n    );\n}\n\nexport async function getStaticPaths() {\n\n    const client = new MongoClient('mongodb+srv://react-course:react-course-pass@cluster0.7s65w.mongodb.net/meetups?retryWrites=true&w=majority')\n\n    await client.connect();\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const meetups = await find('meetups', ({}, { _id: 1 })).toArray();\n\n    client.close();\n\n    return {\n        fallback: false,\n        paths: meetups.map(m => ({\n            params: {\n                meetupId: m._id.toString()\n            }\n        }))\n    }\n}\n\nexport async function getStaticProps(context) {\n    const { params } = context;\n\n    // fetch data from single meetup\n\n    const selectedMeetup = await findOne('meetups', { _id: params.meetupId });\n\n    return {\n        props: {\n            meetupData: {\n                image: selectedMeetup.image,\n                title: selectedMeetup.title,\n                description: selectedMeetup.description,\n                address: selectedMeetup.address,\n            }\n        }\n    }\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}